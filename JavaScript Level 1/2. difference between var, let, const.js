// ОСОБЕННОСТИ VAR: 
// 1. Является наиболее ранним способом объявления переменных (появилась в 1995 году), благодаря чему может быть использован при необходимости поддержки более ранних версий браузеров;

// 2. Значение для самой переменной может быть определено позже. Например:
var cat;
cat = "Simba";

// 3. Есть возможность менять значения переменной, например:
var age = 25;
age = 26; // будет присвоено последнее введенное значение

// 4. Поддерживает повторное объявление, например:
var language = "English";
var language = "Spanish"; // будет присвоено последнее введенное значение

// 5. Переменные, объявленные в рамках блока, будут видны и за его пределами, например:
{
    var city = "Tokyo";
}
console.log(city);


// ОСОБЕННОСТИ LET: 
// 1. Данный способ объявления переменной был добавлен позже, чем var, - в 2015 году;

// 2. Значение для самой переменной может быть определено позже. Например:
let cat;
cat = "Simba";

// 3. Есть возможность менять значения переменной, например:
let age = 25;
age = 26; // будет присвоено последнее введенное значение

// 4. В отличие от var, не поддерживает повторное объявление, например:
let language = "English";
let language = "Spanish"; // приведет к ошибке

// 5. В отличие от var, переменные, объявленные в рамках блока, не будут видны за его пределами, например:
{
    var city = "Tokyo";
}
console.log(city); // приведет к ошибке


// ОСОБЕННОСТИ CONST:
// 1. Как и в случае с let, данный способ объявления переменной был добавлен позже, чем var, - в 2015 году;

// 2. В отличие от var и let, значение для самой переменной должно быть определено сразу. Например:var cat;
const cat = "Simba"; // попытка ввести значение позже приведет к ошибке

// 3. В отличие от var и let, нельзя менять значение переменной:
const age = 25;
age = 26; // приведет к ошибке

// 4. Так же как и let, не поддерживает повторное объявление, например:
let language = "English";
let language = "Spanish"; // приведет к ошибке

// 5. Так же как и в случае с let, переменные, объявленные в рамках блока, не будут видны за его пределами, например:
{
    var city = "Tokyo";
}
console.log(city); // приведет к ошибке