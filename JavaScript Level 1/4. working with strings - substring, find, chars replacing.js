// Strings (строки) - это любые текстовые данные. Внутренний формат для строк - всегда UTF-16, вне зависимости от кодировки страницы.
// При создании строк можно использовать одинарные и двойные кавычки, а также обратные, в которые можно вставлять произвольные выражения в ${...}, например:
function sum(x, y) {
    return x + y;
}
console.log(`x + y = ${sum(15, 20)}`);
// Также при использовании обратных кавычек можно писать больше одной строки:
let pet = `
  - Cat,
  - Dog,
  - Fish,
  `;
  console.log(pet);


// Свойства строк:
  //  .length - возвращает количество символов в строке, например:
  let cat = "Simba";
  console.log(cat.length);  // вернется длина строки - 5



// Методы строк:
  // Для доступа к символу в строке можно использовать методы .charAt() и обращение к строке как к массиву.
  let Cat = "Simba";
  console.log(Cat.charAt(4));   // будет выведен символ с индексом 4 - "a"

  let Cat_2 = "Simba";
  console.log(Cat_2[4]);        // будет выведен символ с индексом 4 - "a"

  // concat() - для слияния строк:
  let x = "Cat's ";
  let y = "name ";
  let z = "is ";
  let i = "Simba :)";
  console.log(x.concat(y,z,i));  // В результате будет выведено "Cat's name is Simba :)"

  
  // split() - разбиение строки на массив значений по разделителю:
  let a = "Cat's name is Simba :)";
  console.log(a.split(" "));    // будет отображен массив ["Cat's", "name", "is", "Simba", ":)"];
  // При split строка разбивается по указанному разделителю (в примере - по пробелу).
  // Также в split можно указывать максимальное количество элементов в финальном массиве, например:
  let b = "Simba is a cat";
  console.log(b.split(" ", 1));   // Вернется только первый элемент "Simba".


  // substring(indexA, indexB) - возвращает часть строки начиная с позиции indexA, но не включая indexB:
  let q = "Simba is a cat";
  console.log(q.substring(0, 5));  // Будет выведен текст с 0 по 4 индексы - "Simba";

  // slice - аналогичен substring, но иначе оаботает с отрицательными и выходящими за границу строки аргументами:
    